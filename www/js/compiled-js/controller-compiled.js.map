{"version":3,"sources":["controller.js"],"names":[],"mappings":";;;;AAAA;;;;AAIA;;;;;;;;AAQA;AACA,eAAe,4BAAf,EAA6C,UAA7C,GAA0D;;AAEtD;;;;;;AAMA,oBAAgB,IAAI,GAAJ,EARsC;AAStD;;;AAGA,aAAS,mBAAU;;AAEf;AACA,YAAI,KAAJ,yDAAU;AAAA;AAAA;AAAA;AAAA;AACN;AACA,gCAAI,kCAAJ,CAAuC,YAAU;AAC7C;AACH,6BAFD;;AAIA;AACA;AACA;;AAEA;AACA,8BAAE,cAAF,EAAkB,GAAlB,CAAsB,CAAtB,EAAyB,OAAzB,CAAiC,IAAjC,CAAsC,mBAAtC;;AAIA;AACA,gCAAG;AACC;AACC,uCAAO,eAAP,CAAuB,UAAvB;AACJ,6BAHD,CAIA,OAAM,GAAN,EAAU,CAAE;;AAEZ,gCAAI,CAAE;;AAEF;AACA;AACH,6BAJD,CAKA,OAAM,GAAN,EAAU,CACT,CAND,SAOO;AACH;AACC,0CAAU,0BAAV,CAAqC,SAArC;AACA,0CAAU,YAAV,CAAuB,IAAvB,GAHE,CAG6B;;AAE/B,+CAAe,4BAAf,EAA6C,KAA7C,CAAmD,UAAnD,GAAgE,IAAhE,CALE,CAKoE;AAC1E;;AAnCK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAV,IAHe,CAwCX;AAEP,KAtDqD;;AAwDtD;;;AAGA,2BAAuB;;AAEnB,kBAAU,kBAAS,KAAT,EAAe;;AAMrB;AANqB;AAAA,oFAOrB;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEO,CAAC,IAAI,OAAJ,EAAD,IAAkB,eAAe,4BAAf,EAA6C,KAA7C,CAAmD,UAAnD,KAAkE,KAF3F;AAAA;AAAA;AAAA;;AAGQ,+CAAW,kBAAX,EAA+B,GAA/B,EAHR,CAG6C;AAH7C;;AAAA;;AAOI;AACA,sCAAE,qBAAF,EAAyB,GAAzB,CAA6B,CAA7B,EAAgC,OAAhC,CAAwC,kBAAxC,GACI,eAAe,4BAAf,EAA6C,UAA7C,CAAwD,qBAAxD,CAA8E,iBADlF;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAPqB;;AAAA,gCAON,kBAPM;AAAA;AAAA;AAAA;;AACrB,gBAAI,YAAY,EAAE,MAAM,MAAR,CAAhB,CADqB,CACY;;AAEjC;AACA;AAcH,SApBkB;;AAsBnB;;;AAGA,kBAAU,oBAAU,CAAE,CAzBH;;AA2BnB;;;AAGA,kBAAU,oBAAU,CAAE,CA9BH;;AAgCnB;;;AAGA,qBAAa,uBAAU,CAAE,CAnCN;;AAqCnB;;;AAGA,2BAAmB,6BAAU;;AAEzB;AACA,gBAAG,EAAE,cAAF,EAAkB,GAAlB,CAAsB,CAAtB,EAAyB,IAAzB,CAA8B,MAAjC,EAAwC;AAAE;AACtC,kBAAE,cAAF,EAAkB,GAAlB,CAAsB,CAAtB,EAAyB,IAAzB,CAA8B,KAA9B;AACA,uBAFoC,CAE5B;AACX;;AAED,gBAAI,YAAJ,CAAiB,OAAjB,CAAyB,+BAAzB,EAA0D,EAAC,OAAO,UAAR;AAClD,8BAAc,CAAC,IAAD,EAAO,KAAP,CADoC,EAA1D,EACsC;AADtC,aAEK,IAFL,CAEU,UAAS,KAAT,EAAgB;AAClB,oBAAI,UAAU,CAAd,EAAiB;AAAE;AACf,8BAAU,GAAV,CAAc,OAAd,GADa,CACY;AAC5B;AACJ,aANL;AAOH;AAvDkB;AA3D+B,CAA1D","file":"controller-compiled.js","sourcesContent":["/**\r\n * Created by UTOPIA SOFTWARE on 22/03/2018.\r\n */\r\n\r\n/**\r\n * file defines all View-Models, Controllers and Event Listeners used by the app\r\n *\r\n * The 'utopiasoftware_app_namespace' namespace variable has being defined in the base js file.\r\n * The author uses the terms 'method' and function interchangeably; likewise the terms 'attribute' and 'property' are\r\n * also used interchangeably\r\n */\r\n\r\n// define the controller namespace\r\nutopiasoftware[utopiasoftware_app_namespace].controller = {\r\n\r\n    /**\r\n     * property holds the Map objects which will contain a reference to dynamically loaded ES modules.\r\n     * NOTE: modules MUST BE deleted from this property i.e. the Map object when no longer need.\r\n     * This is to enable garbage collection and prevent memory leaks.\r\n     * NOTE: the keys used within the map will be identical to the same map value used in the SystemJS.config()\r\n     */\r\n    LOADED_MODULES: new Map(),\r\n    /**\r\n     * method contains the stratup/bootstrap code needed to initiate app logic execution\r\n     */\r\n    startup: function(){\r\n\r\n        // initialise the app libraries and plugins\r\n        ons.ready(async function () {\r\n            // set the default handler for the app\r\n            ons.setDefaultDeviceBackButtonListener(function(){\r\n                // does nothing for now!!\r\n            });\r\n\r\n            // displaying prepping message\r\n            //$('#loader-modal-message').html(\"Loading App...\");\r\n            //$('#loader-modal').get(0).show(); // show loader\r\n\r\n            // load the main-menu page\r\n            $('ons-splitter').get(0).content.load(\"app-main-template\");\r\n\r\n\r\n\r\n            // START ALL CORDOVA PLUGINS CONFIGURATIONS\r\n            try{\r\n                // lock the orientation of the device to 'PORTRAIT'\r\n                 screen.lockOrientation('portrait');\r\n            }\r\n            catch(err){}\r\n\r\n            try { // START ALL THE CORDOVA PLUGINS CONFIGURATION WHICH REQUIRE PROMISE SYNTAX\r\n\r\n                // note: for most promises, we weill use async-wait syntax\r\n                // var a = await Promise.all([SystemJS.import('@syncfusion/ej2-base'), SystemJS.import('@syncfusion/ej2-dropdowns')]);\r\n            }\r\n            catch(err){\r\n            }\r\n            finally{\r\n                // set status bar color\r\n                 StatusBar.backgroundColorByHexString(\"#008000\");\r\n                 navigator.splashscreen.hide(); // hide the splashscreen\r\n\r\n                 utopiasoftware[utopiasoftware_app_namespace].model.isAppReady = true; // true that app is fully loaded and ready\r\n            }\r\n\r\n        }); // end of ons.ready()\r\n\r\n    },\r\n\r\n    /**\r\n     * this is the view-model/controller for the Main Menu page\r\n     */\r\n    mainMenuPageViewModel: {\r\n\r\n        pageInit: function(event){\r\n            var $thisPage = $(event.target); // get a reference to the current page\r\n\r\n            // call the function used to initialise the app page if the app is fully loaded\r\n            loadPageOnAppReady();\r\n\r\n            //function is used to initialise the page if the app is fully ready for execution\r\n            async function loadPageOnAppReady(){\r\n                // check to see if onsen is ready and if all app loading has been completed\r\n                if(!ons.isReady() || utopiasoftware[utopiasoftware_app_namespace].model.isAppReady === false){\r\n                    setTimeout(loadPageOnAppReady, 500); // call this function again after half a second\r\n                    return;\r\n                }\r\n\r\n                // listen for the back button event\r\n                $('#app-main-navigator').get(0).topPage.onDeviceBackButton =\r\n                    utopiasoftware[utopiasoftware_app_namespace].controller.mainMenuPageViewModel.backButtonClicked;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is shown\r\n         */\r\n        pageShow: function(){},\r\n\r\n        /**\r\n         * method is triggered when page is hidden\r\n         */\r\n        pageHide: function(){},\r\n\r\n        /**\r\n         * method is triggered when page is destroyed\r\n         */\r\n        pageDestroy: function(){},\r\n\r\n        /**\r\n         * method is triggered when back button or device back button is clicked\r\n         */\r\n        backButtonClicked: function(){\r\n\r\n            // check if the side menu is open\r\n            if($('ons-splitter').get(0).left.isOpen){ // side menu open, so close it\r\n                $('ons-splitter').get(0).left.close();\r\n                return; // exit the method\r\n            }\r\n\r\n            ons.notification.confirm('Do you want to close the app?', {title: 'Quit App',\r\n                    buttonLabels: ['No', 'Yes']}) // Ask for confirmation\r\n                .then(function(index) {\r\n                    if (index === 1) { // OK button\r\n                        navigator.app.exitApp(); // Close the app\r\n                    }\r\n                });\r\n        }\r\n    }\r\n};\r\n\r\n\r\n"]}